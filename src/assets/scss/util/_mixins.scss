@charset "UTF-8";
@use "variables" as *;
@use "sass:string";
@use "sass:list";

@mixin font($family, $name, $types, $weight, $style: normal) {
  $sources: ();

  @each $type in $types {
    $ext: "";
    @if $type == "opentype" {
      $ext: "otf";
    } @else if $type == "truetype" {
      $ext: "ttf";
    } @else if $type == "woff" {
      $ext: "woff";
    } @else if $type == "woff2" {
      $ext: "woff2";
    } @else {
      @warn "Unknown font type: #{$type}";
    }

    @if $ext != "" {
      $url: $base-url + "fonts/" + $name + "." + $ext;
      $sources: list.append($sources, url(#{$url}) format("#{$type}"), comma);
    }
  }

  // $file-extension: $type;

  // @if ($type == 'opentype') {
  //     $file-extension: 'otf';
  // } @else if ($type == 'truetype') {
  //     $file-extension: 'ttf';
  // }

  // $url: $base-url + 'font/' + $name + '.' + $file-extension;

  font-family: "#{$family}";
  src: #{$sources};
  font-weight: $weight;
  font-style: $style;
}

@mixin bg($url, $pos: center, $size: cover, $color: null) {
  background: $color url(#{$base-url}img/#{$url}) no-repeat $pos / $size;
}

@mixin icon($name, $pos: center, $size: 100% auto, $color: $color-black) {
  mask: url(#{$base-url}img/icon/icon_#{$name}) no-repeat $pos / $size;
  background-color: $color;
}

@mixin blind {
  overflow: hidden;
  position: absolute;
  display: block;
  width: 1px;
  height: 1px;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  border: 0;
  z-index: -1;
}

@mixin ellipsis($line: 1) {
  @if ($line == 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    word-wrap: break-word; // 공백 없을때 글자 짤림 방지
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}

@mixin flex($justify: null, $align: center) {
  display: flex;
  align-items: string.unquote($align);
  @if ($justify) {
    justify-content: string.unquote($justify);
  }
}
