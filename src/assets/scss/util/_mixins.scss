@charset "UTF-8";
@use "variables" as *;
// @use "breakpoints" as *;
// @use "icons" as *;
@use "sass:string";
@use "sass:list";

@mixin font($family, $name, $types, $weight, $style: normal) {
  $sources: ();

  @each $type in $types {
    $ext: "";
    @if $type == "opentype" {
      $ext: "otf";
    } @else if $type == "truetype" {
      $ext: "ttf";
    } @else if $type == "woff" {
      $ext: "woff";
    } @else if $type == "woff2" {
      $ext: "woff2";
    } @else {
      @warn "Unknown font type: #{$type}";
    }

    @if $ext != "" {
      $url: $base-url + "fonts/" + $name + "." + $ext;
      $sources: list.append($sources, url(#{$url}) format("#{$type}"), comma);
    }
  }

  // $file-extension: $type;

  // @if ($type == 'opentype') {
  //     $file-extension: 'otf';
  // } @else if ($type == 'truetype') {
  //     $file-extension: 'ttf';
  // }

  // $url: $base-url + 'font/' + $name + '.' + $file-extension;

  font-family: "#{$family}";
  src: #{$sources};
  font-weight: $weight;
  font-style: $style;
}

@mixin bg($url, $pos: center, $size: cover, $color: null) {
  background: $color url(#{$base-url}img/#{$url}) no-repeat $pos / $size;
}

@mixin icon($name, $pos: center, $size: 100% auto, $color: $color-black) {
  mask: url(#{$base-url}img/icon/icon_#{$name}) no-repeat $pos / $size;
  background-color: $color;
}

@mixin blind {
  overflow: hidden;
  position: absolute;
  display: block;
  width: 1px;
  height: 1px;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  border: 0;
  z-index: -1;
}

@mixin ellipsis($line: 1) {
  @if ($line == 1) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    overflow: hidden;
    text-overflow: ellipsis;
    word-wrap: break-word; // 공백 없을때 글자 짤림 방지
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
  }
}

@mixin flex($justify: null, $align: center) {
  display: flex;
  align-items: string.unquote($align);
  @if ($justify) {
    justify-content: string.unquote($justify);
  }
}

////////////////////////////////////////////////
// focus color
// 추후삭제
@mixin focus($offset: -0.4rem, $color: var(--#{$prefix}-light-color-border-primary), $alpha: 0.8) {
  box-shadow: var(--#{$prefix}-box-shadow-outline-inset);
  outline-offset: $offset;
}

// flex 확대 축소
@mixin flex-size($shrink, $grow) {
  flex-shrink: $shrink;
  flex-grow: $grow;
}

// position
@mixin position($p: absolute, $t: auto, $b: auto, $l: auto, $r: auto) {
  position: $p;
  inset: $t $r $b $l;
  // top: $t;
  // bottom: $b;
  // left: $l;
  // right: $r;
}

// square rectangle
@mixin square($w, $h: $w) {
  width: $w;
  height: $h;
}

// pseudo element setting
@mixin pseudo($c: null) {
  content: '' + $c + '';
}

// flex layout
@mixin flex-layout($d: flex, $ai: flex-start, $jc: flex-start, $fd: row) {
  display: $d;
  align-items: $ai;
  justify-content: $jc;
  flex-direction: $fd;
}

// group contents
@mixin group-wrap() {
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
  position: relative;
  width: 100%;
}

@mixin group() {
  flex: 1 1 auto;
  position: relative;
  width: 1%;
  min-width: 0;
}

// flex item equal width
@mixin equal-width() {
  flex: 1 1 0px;
  min-width: 0;
}

// position 중앙 정렬
@mixin position-center($type: both) {
  // 좌우중앙
  @if $type == 'x' {
    left: 50%;
    transform: translateX(-50%);
  }

  // 상하중앙
  @else if $type == 'y' {
    top: 50%;
    transform: translateY(-50%);
  }

  // 상하좌우중앙
  @else if $type == 'both' {
    left: 50%;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
  }
}

// transform 기준점 중앙 정렬
@mixin transform-origin($x: 50%, $y: 50%) {
  transform-origin: $x $y;
}

// **** text attr **** //
// text ellipsis
@mixin ellipsis($line) {
  display: -webkit-box;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $line;
}

// sr-only
@mixin sr-only {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// reset text : popover/tooltip
@mixin reset-text {
  font-size: var(--#{$prefix}-pc-font-size-body-medium);
  font-style: normal;
  font-weight: var(--#{$prefix}-font-weight-regular);
  line-height: var(--#{$prefix}-line-height-base);
  text-align: left;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;

  // word-break: normal;
  white-space: normal;
  word-spacing: normal;
  line-break: auto;

  @include size-medium {
    font-size: var(--#{$prefix}-mobile-font-size-body-medium);
  }
}

// css animation visibility
@mixin visibility($v) {
  @if $v == hidden {
    visibility: hidden;
    z-index: -1;
    opacity: 0;
  } @else if $v == visible {
    visibility: visible;
    z-index: auto;
    opacity: 1;
  }
}

// **** scroll **** //
@mixin scrollbar-mode($mode: light) {
  &::-webkit-scrollbar-thumb {
    background-color: var(--#{$prefix}-#{$mode}-color-element-secondary-light);
    border-radius: 0.8rem;
  }

  &::-webkit-scrollbar-track {
    background-color: var(--#{$prefix}-#{$mode}-color-element-secondary-lighter);
  }
}

@mixin scrollbar($mode: light) {
  &::-webkit-scrollbar {
    width: 0.8rem;
  }

  @include scrollbar-mode($mode);
}

// text underline
@mixin underline($offset: var(--#{$prefix}-font-underline-offset)) {
  text-decoration: underline;
  text-underline-offset: $offset;
}

@mixin border-position($position: left, $line, $color, $important) {
  border-#{$position}: #{$line} solid #{$color} #{$important};
}

// color mode setting
// $mode-theme: (light, dark) !default;
@mixin color-mode($mode: light) {
  [data-#{$prefix}-mode='#{$mode}'] {
    @content;
  }

  $mode-theme: light;

  @if $mode == light {
    $mode-theme: light;
  } @else if $mode == high-contrast {
    $mode-theme: dark;
  }

  // data-#{$prefix}-mode가 theme일 경우 dark mode 생성
  [data-#{$prefix}-mode='theme'] {
    @media (prefers-color-scheme: #{$mode-theme}) {
      @content;
    }
  }
}

// 사이즈별 variable
@mixin btn-size($unit) {
  // unit value: xsmall small medium larger xlarge
  gap: var(--#{$prefix}-button--gap-#{$unit});
  height: var(--#{$prefix}-button--size-height-#{$unit});
  padding: var(--#{$prefix}-button--padding-y-#{$unit}) var(--#{$prefix}-button--padding-x-#{$unit});
  border-radius: var(--#{$prefix}-button--radius-#{$unit});
  font-size: var(--#{$prefix}-button--small-font-size-#{$unit});
  font-weight: var(--#{$prefix}-button--font-weight-#{$unit});

  @include size-medium-to-large {
    font-size: var(--#{$prefix}-button--medium-font-size-#{$unit});
  }

  @include size-large-more {
    font-size: var(--#{$prefix}-button--large-font-size-#{$unit});
  }

  // 아이콘 크기 변수명에서 'text-' 또는 'link-' 접두사를 제거합니다.
  $icon-size-unit: $unit;
  @if string.index(#{$unit}, 'text-') == 1 {
    $icon-size-unit: string.slice(#{$unit}, 6);
  } @else if string.index(#{$unit}, 'link-') == 1 {
    $icon-size-unit: string.slice(#{$unit}, 6);
  }

  & {
    .svg-icon {
      @include square(var(--#{$prefix}-icon--size-#{$icon-size-unit}));
    }
  }
}

// 고대비모드인경우 border-width가 두꺼워짐
@mixin border-size-mode($mode: light, $size: regular) {
  border-width: var(--#{$prefix}-#{$mode}-border-width-variable-#{$size});
}



//////////////////////////
//breakpoints


@mixin size-medium {
  // 767까지
  @media (max-width: ($breakpoint-medium - 1px)) {
    @content;
  }
}

@mixin size-medium-more {
  // 768이상
  @media (width >= calc($breakpoint-medium)) {
    @content;
  }
}

@mixin size-medium-to-large {
  //  768 ~ 1023
  @media (width >= calc($breakpoint-medium)) and (max-width: ($breakpoint-large - 1px)) {
    @content;
  }
}

// tablet size 이하
@mixin size-large-less {
  // 1023까지
  @media (max-width: ($breakpoint-large - 1px)) {
    @content;
  }
}

// tablet size 이상
@mixin size-large-more {
  // 1024이상
  @media (width >= calc($breakpoint-large)) {
    @content;
  }
}

// 소형 데스크톱
@mixin size-large-to-xlarge {
  // 1024 ~ 1279
  @media (width >= calc($breakpoint-large)) and (width <= calc($breakpoint-xlarge - 1px)) {
    @content;
  }
}

@mixin size-xlarge {
  // 1280 이상
  @media (min-width: $breakpoint-xlarge) {
    @content;
  }
}


///////////////////////////////////////////
/// // svg img
@mixin svg-icon($size: var(--#{$prefix}-icon--size-large), $mode: light, $effect: null) {
  display: inline-flex;
// 
  @include square($size);

  background-color: var(--#{$prefix}-#{$mode}-color-text-basic);

  @if $effect == 'pure' {
    // mask 효과 없이 디자인된 svg 그대로 사용
    background-color: transparent !important;
  }

  forced-color-adjust: none;

  // @media (forced-colors: active) {
  // }
}

// svg icon setting
@mixin icon-set($name, $effect: null) {
  mask-repeat: no-repeat;
  mask-position: center center;
  mask-size: contain;
  mask-image: url(#{$base-url}/images/component/icon/#{$name}.svg);

  @if $effect == 'pure' {
    // mask 효과 없이 디자인된 svg 그대로 사용
    mask-image: none;
    background-image: url(#{$base-url}/images/component/icon/#{$name}.svg);
    background-color: transparent !important;
    background-size: contain;
    background-repeat: no-repeat;

    // mask: none;
  }
}
